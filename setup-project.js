#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

console.log('🚀 objekt-pro.at Setup gestartet...\n');

const basePath = __dirname;
const folders = ['backend','backend/routes','backend/middleware','backend/utils','frontend','frontend/public','frontend/src','sql','config','docs','logs','uploads'];

const files = {
    'package.json': {"name":"objekt-pro","version":"1.0.0","description":"objekt-pro.at - 100-Dateien Upload","main":"backend/server.js","scripts":{"install-all":"npm run install-backend && npm run install-frontend","install-backend":"cd backend && npm install","install-frontend":"cd frontend && npm install","dev":"concurrently \"npm run dev-backend\" \"npm run dev-frontend\"","dev-backend":"cd backend && npm run dev","dev-frontend":"cd frontend && npm start","start":"cd backend && npm start","build":"cd frontend && npm run build","deploy":"npm run build","test":"npm run test-backend"},"keywords":["objekt-pro","100-files-upload","nodejs"],"author":"Ihr Unternehmen","license":"ISC","devDependencies":{"concurrently":"^8.2.0"},"homepage":"https://objekt-pro.at","engines":{"node":">=16.0.0"}},

    'README.md': `# 🏗️ objekt-pro.at\n\n**100-Dateien Upload System**\n\n## Quick Start\n\n\`\`\`bash\nnpm run install-backend\nnpm run dev-backend\n\`\`\`\n\n## Features\n- ✅ 100 Dateien gleichzeitig\n- ✅ Google Drive Integration\n- ✅ MySQL Database\n- ✅ JWT Authentication\n\n## URLs\n- Local: http://localhost:3001\n- Production: https://objekt-pro.at`,

    '.gitignore': `node_modules/\n*/node_modules/\n.env\nbackend/.env\nbuild/\ndist/\nlogs/\n*.log\nuploads/\n.vscode/\n.idea/\n.DS_Store\npackage-lock.json\n*.tmp`,

    'backend/package.json': {"name":"objekt-pro-backend","version":"1.0.0","main":"server.js","scripts":{"start":"node --max-old-space-size=4096 server.js","dev":"nodemon --max-old-space-size=4096 server.js","prod":"NODE_ENV=production node server.js"},"dependencies":{"express":"^4.18.2","mysql2":"^3.6.0","bcrypt":"^5.1.1","jsonwebtoken":"^9.0.2","multer":"^1.4.5-lts.1","googleapis":"^126.0.1","cors":"^2.8.5","dotenv":"^16.3.1","helmet":"^7.0.0","express-rate-limit":"^6.10.0","express-validator":"^7.0.1","compression":"^1.7.4","morgan":"^1.10.0"},"devDependencies":{"nodemon":"^3.0.1"}},

    'backend/.env': `NODE_ENV=development\nPORT=3001\nDB_HOST=objekt-pro.at\nDB_PORT=3306\nDB_NAME=objektpro_db\nDB_USER=objektpro_user_w\nDB_PASSWORD=Epr7YDqURSYBGQT2\nJWT_SECRET=ObjektPro2025SuperSecret\nJWT_EXPIRES_IN=24h\nBCRYPT_ROUNDS=12\nGOOGLE_CLIENT_ID=your-client-id\nGOOGLE_CLIENT_SECRET=your-client-secret\nGOOGLE_REFRESH_TOKEN=your-refresh-token\nMAX_FILE_SIZE=104857600\nMAX_FILES_PER_UPLOAD=100\nDOMAIN=objekt-pro.at\nBASE_URL=https://objekt-pro.at`,

    'backend/server.js': `require('dotenv').config();\nconst express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst compression = require('compression');\nconst morgan = require('morgan');\nconst rateLimit = require('express-rate-limit');\nconst path = require('path');\n\nconst authRoutes = require('./routes/auth');\nconst anlagenRoutes = require('./routes/anlagen');\nconst filesRoutes = require('./routes/files');\nconst { authenticateToken } = require('./middleware/auth');\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\nconst NODE_ENV = process.env.NODE_ENV || 'development';\n\napp.set('trust proxy', 1);\nprocess.setMaxListeners(0);\n\napp.use(helmet());\n\nconst uploadLimiter = rateLimit({\n  windowMs: 10 * 60 * 1000,\n  max: 50,\n  message: { error: 'Upload-Limit erreicht' }\n});\n\napp.use('/api/upload', uploadLimiter);\napp.use(compression());\napp.use(morgan(NODE_ENV === 'production' ? 'combined' : 'dev'));\n\napp.use(cors({\n  origin: NODE_ENV === 'production' \n    ? ['https://objekt-pro.at', 'https://www.objekt-pro.at']\n    : ['http://localhost:3000', 'http://localhost:3001'],\n  credentials: true\n}));\n\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: true, limit: '50mb' }));\napp.use(express.static(path.join(__dirname, '../frontend/build')));\n\nglobal.uploadProgress = new Map();\n\napp.use('/api/auth', authRoutes);\napp.use('/api/anlagen', authenticateToken, anlagenRoutes);\napp.use('/api/files', authenticateToken, filesRoutes);\n\napp.get('/health', (req, res) => {\n  const memUsage = process.memoryUsage();\n  res.json({\n    status: 'OK',\n    service: 'objekt-pro.at API',\n    version: '1.0.0',\n    environment: NODE_ENV,\n    uptime: Math.floor(process.uptime()),\n    memory: {\n      used: Math.round(memUsage.heapUsed / 1024 / 1024) + ' MB',\n      total: Math.round(memUsage.heapTotal / 1024 / 1024) + ' MB'\n    },\n    upload_system: {\n      max_files_per_batch: 100,\n      max_file_size: '100MB',\n      active_uploads: global.uploadProgress.size,\n      supported_formats: ['JPG', 'PNG', 'MP4', 'MOV']\n    }\n  });\n});\n\napp.get('/', (req, res) => {\n  res.json({\n    name: 'objekt-pro.at API',\n    version: '1.0.0',\n    description: '100-Dateien Upload System',\n    features: {\n      max_simultaneous_uploads: 100,\n      batch_processing: true,\n      progress_tracking: true\n    },\n    endpoints: {\n      health: '/health',\n      auth: '/api/auth',\n      anlagen: '/api/anlagen',\n      files: '/api/files'\n    },\n    timestamp: new Date().toISOString()\n  });\n});\n\napp.get('/api/test', (req, res) => {\n  res.json({\n    api: '✅ API funktioniert',\n    upload_system: {\n      status: '✅ bereit für 100-Dateien Uploads',\n      max_files: 100,\n      max_file_size: '100MB'\n    },\n    database: '⏳ noch nicht verbunden',\n    google_drive: '⏳ noch nicht konfiguriert',\n    timestamp: new Date().toISOString()\n  });\n});\n\napp.get('/api/upload/progress/:batchId', authenticateToken, (req, res) => {\n  const { batchId } = req.params;\n  const progress = global.uploadProgress.get(batchId);\n  if (!progress) {\n    return res.status(404).json({ error: 'Upload-Batch nicht gefunden' });\n  }\n  res.json({\n    batchId,\n    status: progress.status,\n    files_total: progress.total,\n    files_processed: progress.processed,\n    progress_percent: Math.round((progress.processed / progress.total) * 100)\n  });\n});\n\napp.get('*', (req, res) => {\n  if (req.path.startsWith('/api/')) {\n    return res.status(404).json({ error: 'API-Endpoint nicht gefunden' });\n  }\n  res.sendFile(path.join(__dirname, '../frontend/build', 'index.html'));\n});\n\napp.use((err, req, res, next) => {\n  if (err.code === 'LIMIT_FILE_SIZE') {\n    return res.status(413).json({ error: 'Datei zu groß', message: 'Max 100MB' });\n  }\n  if (err.code === 'LIMIT_FILE_COUNT') {\n    return res.status(413).json({ error: 'Zu viele Dateien', message: 'Max 100 Dateien' });\n  }\n  console.error('Server Error:', err);\n  res.status(500).json({ error: NODE_ENV === 'production' ? 'Serverfehler' : err.message });\n});\n\nconst server = app.listen(PORT, () => {\n  console.log(\`🚀 objekt-pro.at Server gestartet\`);\n  console.log(\`🌐 Local: http://localhost:\${PORT}\`);\n  console.log(\`📊 Environment: \${NODE_ENV}\`);\n  console.log(\`📁 100-Dateien Upload: AKTIV\`);\n});\n\nconst gracefulShutdown = (signal) => {\n  console.log(\`🛑 \${signal} empfangen\`);\n  server.close(() => process.exit(0));\n  setTimeout(() => process.exit(1), 10000);\n};\n\nprocess.on('SIGTERM', () => gracefulShutdown('SIGTERM'));\nprocess.on('SIGINT', () => gracefulShutdown('SIGINT'));\n\nmodule.exports = app;`,

    'backend/routes/auth.js': `const express = require('express');\nconst router = express.Router();\n\nrouter.post('/login', (req, res) => {\n  res.json({\n    message: 'Login-Route bereit',\n    status: '⏳ noch nicht implementiert'\n  });\n});\n\nrouter.get('/test', (req, res) => {\n  res.json({\n    auth: '✅ Auth-System bereit',\n    routes: ['POST /login', 'GET /test']\n  });\n});\n\nmodule.exports = router;`,

    'backend/routes/anlagen.js': `const express = require('express');\nconst router = express.Router();\n\nrouter.get('/', (req, res) => {\n  res.json({\n    message: 'Anlagen-Route bereit',\n    anlagen: [],\n    status: '⏳ noch nicht implementiert'\n  });\n});\n\nrouter.post('/', (req, res) => {\n  res.json({\n    message: 'Anlage-Erstellung bereit',\n    status: '⏳ noch nicht implementiert'\n  });\n});\n\nrouter.get('/test', (req, res) => {\n  res.json({\n    anlagen: '✅ Anlagen-System bereit',\n    routes: ['GET /', 'POST /', 'GET /test']\n  });\n});\n\nmodule.exports = router;`,

    'backend/routes/files.js': `const express = require('express');\nconst router = express.Router();\n\nrouter.get('/:anlageId', (req, res) => {\n  const { anlageId } = req.params;\n  res.json({\n    message: 'File-Route bereit',\n    anlageId,\n    files: [],\n    max_files_supported: 100,\n    status: '⏳ noch nicht implementiert'\n  });\n});\n\nrouter.post('/upload/:anlageId', (req, res) => {\n  const { anlageId } = req.params;\n  res.json({\n    message: '100-Dateien Upload bereit',\n    anlageId,\n    upload_capacity: {\n      max_files: 100,\n      max_file_size: '100MB',\n      supported_formats: ['JPG', 'PNG', 'MP4', 'MOV']\n    },\n    status: '⏳ noch nicht implementiert'\n  });\n});\n\nrouter.get('/test/system', (req, res) => {\n  res.json({\n    files: '✅ File-System bereit für 100-Dateien Upload',\n    routes: ['GET /:anlageId', 'POST /upload/:anlageId', 'GET /test/system']\n  });\n});\n\nmodule.exports = router;`,

    'backend/middleware/auth.js': `const jwt = require('jsonwebtoken');\n\nconst authenticateToken = (req, res, next) => {\n  if (process.env.NODE_ENV === 'development') {\n    req.user = {\n      userId: 1,\n      email: 'dev@objekt-pro.at',\n      role: 'admin',\n      name: 'Development User'\n    };\n    return next();\n  }\n\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ error: 'Access Token erforderlich' });\n  }\n\n  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\n    if (err) return res.status(403).json({ error: 'Token ungültig' });\n    req.user = user;\n    next();\n  });\n};\n\nconst requireAdmin = (req, res, next) => {\n  if (req.user.role !== 'admin') {\n    return res.status(403).json({ error: 'Admin-Berechtigung erforderlich' });\n  }\n  next();\n};\n\nmodule.exports = { authenticateToken, requireAdmin };`,

    'backend/middleware/upload.js': `const multer = require('multer');\nconst path = require('path');\nconst fs = require('fs');\n\nconst uploadDir = path.join(__dirname, '../../uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => cb(null, uploadDir),\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n  }\n});\n\nconst fileFilter = (req, file, cb) => {\n  const allowedTypes = ['image/jpeg','image/jpg','image/png','image/gif','video/mp4','video/quicktime','video/x-msvideo'];\n  if (allowedTypes.includes(file.mimetype)) {\n    cb(null, true);\n  } else {\n    cb(new Error(\`Dateityp nicht erlaubt: \${file.mimetype}\`), false);\n  }\n};\n\nconst uploadFiles = multer({\n  storage,\n  limits: {\n    fileSize: 100 * 1024 * 1024,\n    files: 100\n  },\n  fileFilter\n}).array('files', 100);\n\nmodule.exports = { uploadFiles };`,

    'backend/utils/database.js': `const mysql = require('mysql2/promise');\n\nlet pool = null;\n\nconst createPool = () => {\n  if (!pool) {\n    pool = mysql.createPool({\n      host: process.env.DB_HOST || 'objekt-pro.at',\n      port: process.env.DB_PORT || 3306,\n      user: process.env.DB_USER || 'objektpro_user_w',\n      password: process.env.DB_PASSWORD || 'Epr7YDqURSYBGQT2',\n      database: process.env.DB_NAME || 'objektpro_db',\n      waitForConnections: true,\n      connectionLimit: 10,\n      charset: 'utf8mb4',\n      timezone: '+01:00'\n    });\n    console.log('✅ MySQL Pool erstellt');\n  }\n  return pool;\n};\n\nconst getConnection = async () => {\n  try {\n    const pool = createPool();\n    const connection = await pool.getConnection();\n    return connection;\n  } catch (error) {\n    console.error('❌ MySQL-Fehler:', error.message);\n    throw error;\n  }\n};\n\nconst testConnection = async () => {\n  try {\n    const connection = await getConnection();\n    const [rows] = await connection.execute('SELECT 1 as test');\n    connection.release();\n    return { success: true, message: 'Database erreichbar' };\n  } catch (error) {\n    return { success: false, error: error.message };\n  }\n};\n\nmodule.exports = { getConnection, createPool, testConnection };`,

    'backend/utils/googleDrive.js': `const { google } = require('googleapis');\nconst fs = require('fs');\n\nlet drive = null;\n\nconst initializeGoogleDrive = () => {\n  try {\n    const oauth2Client = new google.auth.OAuth2(\n      process.env.GOOGLE_CLIENT_ID,\n      process.env.GOOGLE_CLIENT_SECRET,\n      'https://objekt-pro.at/auth/callback'\n    );\n\n    if (process.env.GOOGLE_REFRESH_TOKEN) {\n      oauth2Client.setCredentials({ refresh_token: process.env.GOOGLE_REFRESH_TOKEN });\n    }\n\n    drive = google.drive({ version: 'v3', auth: oauth2Client });\n    console.log('✅ Google Drive initialisiert');\n    return true;\n  } catch (error) {\n    console.error('❌ Google Drive Fehler:', error.message);\n    return false;\n  }\n};\n\nconst uploadMultipleFiles = async (files, folderId) => {\n  if (!drive) return { success: false, error: 'Google Drive nicht initialisiert' };\n\n  const results = { total: files.length, success: 0, failed: 0, uploads: [] };\n\n  for (const file of files) {\n    try {\n      const fileMetadata = { name: file.originalname };\n      if (folderId) fileMetadata.parents = [folderId];\n\n      const response = await drive.files.create({\n        resource: fileMetadata,\n        media: { body: fs.createReadStream(file.path) },\n        fields: 'id,name,size'\n      });\n\n      results.success++;\n      results.uploads.push({ originalName: file.originalname, googleDriveId: response.data.id });\n    } catch (error) {\n      results.failed++;\n    }\n  }\n\n  return results;\n};\n\nmodule.exports = { initializeGoogleDrive, uploadMultipleFiles };`,

    'sql/schema.sql': `USE objektpro_db;\n\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    password VARCHAR(255) NOT NULL,\n    name VARCHAR(255) NOT NULL,\n    role ENUM('admin', 'mitarbeiter') DEFAULT 'mitarbeiter',\n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    INDEX idx_email (email)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nCREATE TABLE anlagen (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    address TEXT NOT NULL,\n    description TEXT,\n    google_drive_folder_id VARCHAR(255),\n    created_by INT NOT NULL,\n    active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (created_by) REFERENCES users(id),\n    INDEX idx_name (name)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nCREATE TABLE files (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    anlage_id INT NOT NULL,\n    filename VARCHAR(255) NOT NULL,\n    original_filename VARCHAR(255) NOT NULL,\n    mimetype VARCHAR(100) NOT NULL,\n    size BIGINT NOT NULL,\n    google_drive_file_id VARCHAR(255) NOT NULL,\n    batch_id VARCHAR(255),\n    uploaded_by INT NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (anlage_id) REFERENCES anlagen(id) ON DELETE CASCADE,\n    FOREIGN KEY (uploaded_by) REFERENCES users(id),\n    INDEX idx_batch (batch_id)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nCREATE TABLE upload_batches (\n    id VARCHAR(255) PRIMARY KEY,\n    anlage_id INT NOT NULL,\n    user_id INT NOT NULL,\n    total_files INT NOT NULL,\n    processed_files INT DEFAULT 0,\n    status ENUM('pending', 'processing', 'completed') DEFAULT 'pending',\n    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (anlage_id) REFERENCES anlagen(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nINSERT INTO users (email, password, name, role) VALUES \n('admin@objekt-pro.at', '$2b$10$rOKwN8qAP9vKOqALkqmEaOuOAh0VK5TvnFXhvC9F8YQTJQmOSDgHO', 'Administrator', 'admin');\n\nINSERT INTO anlagen (name, address, description, created_by) VALUES \n('Breitenfurter Strasse 18', '1120 Wien', 'Hauptgebäude', 1),\n('Demo-Anlage', '1010 Wien', 'Test-Anlage für 100-Dateien', 1);\n\nSELECT 'objekt-pro.at Database mit 100-Dateien Support erstellt!' as Status;`
};

function createFolders() {
    console.log('📁 Erstelle Ordner...');
    folders.forEach(folder => {
        const folderPath = path.join(basePath, folder);
        if (!fs.existsSync(folderPath)) {
            fs.mkdirSync(folderPath, { recursive: true });
            console.log(`✅ ${folder}`);
        }
    });
}

function createFiles() {
    console.log('\n📄 Erstelle Dateien...');
    Object.entries(files).forEach(([filePath, content]) => {
        const fullPath = path.join(basePath, filePath);
        const dir = path.dirname(fullPath);

        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }

        try {
            if (typeof content === 'object') {
                fs.writeFileSync(fullPath, JSON.stringify(content, null, 2), 'utf8');
            } else {
                fs.writeFileSync(fullPath, content, 'utf8');
            }
            console.log(`✅ ${filePath}`);
        } catch (error) {
            console.error(`❌ ${filePath}:`, error.message);
        }
    });
}

try {
    createFolders();
    createFiles();

    console.log('\n🎉 Setup erfolgreich!\n');
    console.log('📋 Nächste Schritte:');
    console.log('1️⃣  cd backend');
    console.log('2️⃣  npm install');
    console.log('3️⃣  npm run dev');
    console.log('4️⃣  http://localhost:3001\n');
    console.log('🎯 100-Dateien Upload System ist bereit! 🚀');
} catch (error) {
    console.error('❌ Setup-Fehler:', error);
}