- name: ðŸ¤– ChatGPT analysiert Commit mit Dateien + Inhalt
  env:
    OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  run: |
    COMMIT_MSG=$(git log -1 --pretty=format:"%s")
    FILES_CHANGED=$(git diff-tree --no-commit-id --name-only -r HEAD)
    DIFF_INHALT=$(git diff HEAD^ HEAD)
    
    echo "Commit-Nachricht: $COMMIT_MSG"
    echo "GeÃ¤nderte Dateien:\n$FILES_CHANGED"
    
    echo "$COMMIT_MSG" > commit.txt
    echo "$FILES_CHANGED" > files.txt
    echo "$DIFF_INHALT" > diff.txt
    
    python3 <<EOF
  import os
  import openai
  from github import Github
  
  openai.api_key = os.getenv("OPENAI_API_KEY")

                     with open("commit.txt", "r", encoding="utf-8") as f:
                       commit_msg = f.read()

                     with open("files.txt", "r", encoding="utf-8") as f:
                       files_changed = f.read()

                     with open("diff.txt", "r", encoding="utf-8") as f:
                       diff_content = f.read()

  repo_name = os.getenv("GITHUB_REPOSITORY")
  token = os.getenv("GITHUB_TOKEN")

                     prompt = f"Commit-Nachricht: {commit_msg}\\n\\nGeÃ¤nderte Dateien:\\n{files_changed}\\n\\nCode-Ã„nderungen:\\n{diff_content}\\n\\nBitte fasse die Ã„nderungen technisch sinnvoll zusammen, identifiziere mÃ¶gliche Risiken oder VerbesserungsvorschlÃ¤ge und schreibe alles auf Deutsch."

  antwort = openai.ChatCompletion.create(
  model="gpt-3.5-turbo",
  messages=[
  {"role": "system", "content": "Du bist ein professioneller Softwareentwickler. Antworte immer auf Deutsch."},
  {"role": "user", "content": prompt}
]
  )
  
  zusammenfassung = antwort["choices"][0]["message"]["content"]
  print("Antwort der KI:\\n", zusammenfassung)

                     with open("KI-Feedback.md", "w", encoding="utf-8") as f:
                       f.write("# Automatische KI-Zusammenfassung zum letzten Commit\\n\\n")
                       f.write(f"**Commit-Nachricht:** {commit_msg}\\n\\n")
                       f.write(f"**GeÃ¤nderte Dateien:**\\n{files_changed}\\n\\n")
                       f.write("**Code-Ã„nderungen (Ausschnitt):**\\n\\n")
                       f.write(diff_content[:3000])
                       f.write("\\n\\n**ChatGPT-Analyse:**\\n\\n")
                       f.write(zusammenfassung)

# Changelog aktualisieren
  changelog_text = f"\\n\\n## {commit_msg}\\n\\n{zusammenfassung}\\n"
                     if os.path.exists("CHANGELOG.md"):
                       with open("CHANGELOG.md", "r", encoding="utf-8") as changelog:
                         existing = changelog.read()
                     else:
                       existing = "# Ã„nderungsprotokoll\\n"

                     with open("CHANGELOG.md", "w", encoding="utf-8") as changelog:
                       changelog.write(existing.strip() + changelog_text)

# Optional PR-Kommentar
                     try:
                       github = Github(token)
                       repo = github.get_repo(repo_name)
                       for pr in repo.get_pulls(state="open"):
                         pr.create_issue_comment("ðŸ¤– Automatisierte KI-Zusammenfassung:\\n\\n" + zusammenfassung)
                     except Exception as e:
                       print("Kein PR-Kommentar mÃ¶glich oder Fehler: ", e)
  EOF
